package click.isreal.topbar.client;

import click.isreal.topbar.Topbar;
import net.arikia.dev.drpc.DiscordEventHandlers;
import net.arikia.dev.drpc.DiscordRPC;
import net.arikia.dev.drpc.DiscordRichPresence;
import net.minecraft.util.Formatting;
import org.apache.logging.log4j.Level;

import java.sql.Timestamp;


public class discordRPC
{
  private final static String appId = "916437803326406721";
  private final TopbarClient topbar = TopbarClient.getInstance();

  public long timeStampStart = 0L;
  public boolean oldState = false;
  public DiscordRichPresence presence;
  public DiscordEventHandlers handlers;

  public Thread thread;
  public boolean doRun = false;

  public DiscordRichPresence buildPresence()
  {
    if (TopbarClient.getInstance() != null && oldState != TopbarClient.getInstance().isMixelPixel())
    {
      timeStampStart = new Timestamp(System.currentTimeMillis()).getTime();
      oldState = !oldState;
    }

    if(oldState)
    {
      String state = "";
      String world = Formatting.strip(topbar.getWorldName(topbar.world));
      switch ( topbar.world )
      {
        case HUB:
          state = topbar.strRolle;
          break;
        case WW:
          state = topbar.strRolle;
          break;
        case KFFA:
          world += " - " + Formatting.strip(topbar.strRolle);
          state = topbar.strKffaMap + " "+ topbar.strKffaTime;
          break;
        case FLORA:
        case AQUA:
        case VULKAN:
        case DONNER:
          state = topbar.strDimension;
          break;
        default:
          state = "";
      }
      DiscordRichPresence.Builder presence = new DiscordRichPresence.Builder(Formatting.strip(state));
      presence.setDetails( world );
      presence.setBigImage("logomp", "Join MixelPixel Discord:\n discord.gg/mixelpixel");
      presence.setStartTimestamps(timeStampStart);
      return presence.build();
    }
    else
    {
      DiscordRichPresence.Builder presence = new DiscordRichPresence.Builder("Made by Yveâ„¢");
      presence.setDetails( "using MC-Mod " );
      presence.setBigImage("logolurkklinik", "Visit DonnerPrinzessin @CB-Donner");
      presence.setStartTimestamps(timeStampStart);
      return presence.build();
    }

  }

  public discordRPC()
  {
    try
    {
      Topbar.log.log(Level.INFO, "Init Discord Handler...");
      DiscordEventHandlers.Builder builder = new DiscordEventHandlers.Builder();
      builder.setReadyEventHandler((user) -> {
        Topbar.log.log(Level.INFO, "Discord connectet to user: " + user.username + "#" + user.discriminator);
      });
      handlers = builder.build();
    }
    catch ( Throwable e )
    {
      Topbar.log.log(Level.WARN, "Error: " + e.getMessage());
    }
    thread = new Thread()
    {
      public void run()
      {
        while ( doRun )
        {
          presence = buildPresence();
          DiscordRPC.discordUpdatePresence(presence);
          DiscordRPC.discordRunCallbacks();
          try
          {
            Thread.sleep(1000);
          }
          catch ( InterruptedException e )
          {
            e.printStackTrace();
          }
        }

      }
    };
    start();
  }

  public void start()
  {
    doRun = Topbar.getInstance().isDiscordEnabled();
    if (doRun)
    {
      timeStampStart = new Timestamp(System.currentTimeMillis()).getTime();

      try
      {
        DiscordRPC.discordInitialize(appId, handlers, true);
        presence = buildPresence();
        DiscordRPC.discordUpdatePresence(presence);

        DiscordRPC.discordRegister(appId,"");
      }
      catch ( Throwable e )
      {
        Topbar.log.log(Level.WARN, "Error: " + e.getMessage());
      }

      thread.start();
    }
  }


  public void stop()
  {
    doRun = false;
    DiscordRPC.discordShutdown();
  }
}